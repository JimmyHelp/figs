---

log:
    content: log(60, "abc")



logJson:
    content: logJson('{"text":"meow ^^","color":"#a672ef"}')



logTable:
    content: |-
      local table = {'string',{'tableception'}}
      
      logTable(table,2)



print:
    content: print(60, "abc")



printJson:
    content: printJson('{"text":"meow ^^","color":"#a672ef"}')



printTable:
    content: |-
      local table = {'string',{'tableception'}}
      
      printTable(table,2)



require:
    content: |- 
      local library = require("lib.parser") 
      -- this will import a file



ActionWheelAPI.execute:
    content: |-
      examplePage = action_wheel:createPage()
      action_wheel:setPage(examplePage)
      examplePage:newAction(1):onRightClick(function() log('chat spam :3') end)

      events.TICK:register(function()
        action_wheel:execute(1,true)
      end)
      -- this will only run if the action wheel is open



ActionWheelAPI.isEnabled:
    content: |-
      examplePage = action_wheel:createPage()
      action_wheel:setPage(examplePage)

      events.TICK:register(function()
        if action_wheel:isEnabled() then
          log("action wheel's is open!")
        end
      end)



ActionWheelAPI.getPage:
    content: |-
      action_wheel:createPage('examplePage')
      log(action_wheel:getPage('examplePage'))



ActionWheelAPI.createPage:
    content: action_wheel:createPage('examplePage')



ActionWheelAPI.getSelected:
    content: |-
      examplePage = action_wheel:createPage()
      action_wheel:setPage(examplePage)
      for slot = 1,8 do
        examplePage:newAction(slot)
      end

      events.TICK:register(function()
        log(action_wheel:getSelected())
      end)
      -- returns even if the action wheel is closed



ActionWheelAPI.setPage:
    content: |-
      examplePage = action_wheel:createPage()
      action_wheel:setPage(examplePage)



ActionWheelAPI.leftClick:
    content: |-
      examplePage = action_wheel:createPage('pageName')
        action_wheel:setPage(examplePage)
  
      function action_wheel.leftClick()
        log('you just left clicked while in the action wheel!')
      end



ActionWheelAPI.rightClick:
    content: |-
      examplePage = action_wheel:createPage('pageName')
        action_wheel:setPage(examplePage)
  
      function action_wheel.rightClick()
        log('you just left clicked while in the action wheel!')
      end



ActionWheelAPI.scroll:
    content: |-
      examplePage = action_wheel:createPage('pageName')
      action_wheel:setPage(examplePage)

      function action_wheel.scroll(direction)
        log(direction)
      end



ClientAPI.getVersion:
    content: log(client.getVersion())



ClientAPI.getParticleCount:
    content: |-
      events.TICK:register(function()
        log(client.getParticleCount())
      end)



ClientAPI.getJavaVersion:
    content: log(client.getJavaVersion())



ClientAPI.getAllocatedMemory:
    content: |-
      log(client.getAllocatedMemory())
      -- returns memory in bytes



ClientAPI.getVersionType:
    content: log(client.getVersionType())



ClientAPI.getCurrentEffect:
    content: |-
      events.TICK:register(function()
        log(client.getCurrentEffect())
      end)



ClientAPI.getUsedMemory:
    content: |-
      events.TICK:register(function()
        log(client.getUsedMemory())
      end)
      -- returns memory in bytes



ClientAPI.isPaused:
    content: |-
      events.TICK:register(function()
        log(client.isPaused())
      end)



ClientAPI.getMaxMemory:
    content: |-
      log(client.getMaxMemory())
      -- returns memory in bytes



ClientAPI.getServerBrand:
    content: log(client.getServerBrand())



ClientAPI.getEntityCount:
    content: |-
      events.TICK:register(function()
        log(client.getEntityCount())
      end)



ClientAPI.getSoundStatistics:
    content: |-
      events.TICK:register(function()
        log(client.getSoundStatistics())
      end)
      -- sounds playing / sounds limit + ambient sounds playing / ambient sounds limit



ClientAPI.getChunkStatistics:
    content: |-
      log(client.getChunkStatistics())
      -- Number of chunk sections rendered / the total number of chunk sections in the loaded area



ClientAPI.getFPS:
    content: |-
      events.TICK:register(function()
        log(client.getFPS())
      end)



ClientAPI.getFPSString:
    content: |-
      events.TICK:register(function()
        log(client.getFPSString())
      end)



ClientAPI.getTextHeight:
    content: log(client.getTextHeight('TEXT!'))



ClientAPI.getSystemTime:
    content: |-
      events.TICK:register(function()
        log(client.getSystemTime())
      end)



ClientAPI.getActiveLang:
    content: log(client.getActiveLang())



ClientAPI.isWindowFocused:
    content: |-
      events.TICK:register(function()
        log(client.isWindowFocused())
      end)



ClientAPI.isHudEnabled:
    content: |-
      events.TICK:register(function()
        log(client.isHudEnabled())
      end)



ClientAPI.getMousePos:
    content: |-
      events.TICK:register(function()
        log(client.getMousePos())
      end)



ClientAPI.getTextWidth:
    content: log(client.getTextWidth('TEXT!'))



ClientAPI.getCameraPos:
    content: |-
      events.TICK:register(function()
        log(client.getCameraPos())
      end)



ClientAPI.getFOV:
    content: log(client.getFOV())



ClientAPI.getWindowSize:
    content: |-
      events.TICK:register(function()
        log(client.getWindowSized())
      end)



ClientAPI.getCameraRot:
    content: |-
      events.TICK:register(function()
        log(client.getCameraRot())
      end)



ClientAPI.getGuiScale:
    content: log(client.getGuiScale())



ClientAPI.getEntityStatistics:
    content: |- 
      log(client.getEntityStatistics())
      -- Number of rendered entities / total entities, 0, simulation distance



ClientAPI.isDebugOverlayEnabled:
    content: |-
      events.TICK:register(function()
        log(client.isDebugOverlayEnabled())
      end)



ClientAPI.getScaledWindowSize:
    content: |-
      events.TICK:register(function()
        log(client.getScaledWindowSize())
      end)




Page.getAction:
    content: local action = myPage:getAction(1)



ClickAction.onRightClick:
    content: |-
      local myAction = myPage:newAction()

      myAction:onRightClick(function()
          log("Heheh I got Right Clicked!")
      end)



ClickAction.onLeftClick:
    content: |-
      local myAction = myPage:newAction()

      myAction:onLeftClick(function()
          log("Heheh I got Left Clicked!")
      end)


Animation.play:
    content: animations.bbmodelName.animationName:play()

SoundAPI.playSound:
    content: sounds:playSound("entity.bat.ambient", player:getPos(),1,1,false)
