---
title: How to pings
description: A complete guide on the black-magic behind pings
author: Applejuice
---
# Networking, the unavoidable pain
And that is also true for figura, there is things happening with the avatar in your machine that your avatar in other people's machines do not know. ~~And no, this isn't a way to communicate between avatars~~

~ *What do you mean?*

Let me explain:

Your avatar is not run *globally* for everyone that is seeing it, in fact, every machine seeing your avatar is running your avatar on their machine separately from the avatar running on your machine, and they're not aware of the properties that only your avatar can access on your machine

You need to manually tell these avatars running on other people's machines when something happened/a value that only the host has

## Introducing pings
When you execute a ping, a notification is sent to the backend, and by extension, to all instances of your avatar currently being run. You can use these pings to notify the other instances of your avatar that something has happened/a value that you would like them to know that only the avatar in your machine can access.

This is mostly used in conjunction with the action wheel, or keybinds, since they're only executed on the host-side ("host" in here means your avatar in your machine), and since they're only executed on the host-side, it's up to the avatar's job to let the other instances to know and react to this event. This is just another tool, and like another tool, you can use it when it's necessary even when you're not using action wheels or keybinds

~ *How do I use these pings?*

In order to use pings, you first have to register them. You simply register them by assigning them to `pings`.

```
function pings.example()

end

--or

pings.example = function()

end
```

And in order to call these pings you just have to call them like ordinary functions

```
pings.example()
```

## In-field example with action wheel
As explained before, action wheels are only executed in the host, and need to be communicated to the other machines that an action has been performed

```
local page = action_wheel:newPage()

local action = page:newAction()

action:setTitle("Transform")
function action.leftClick()
    print("Transforming!!")  -- imagine that this actually does something useful
end
```

Do you see what the problem is here? This example doesn't make use of pings! And other machines will *never* know when the user wants to actually transform.

How do we fix this?

Well, we can extract the function that is executed when the action is clicked, turn it into a ping, and when the action is clicked, we call the ping

```
function pings.transform()
    print("Transforming!!")  -- imagine that this actually does something useful
end

local page = action_wheel:newPage()

local action = page:newAction()

action:setTitle("Transform")
function action.leftClick()
    pings.transform()
end
```

This way, when the user clicks an action, a notification is sent to the other instances of your avatar, and these avatars also execute the ping, which used to be called when the action is clicked.

## In-field example using keybinds
Imagine this piece of code

```
local keybind = keybinds:newKeybind("Dance", "key.keyboard.u")

keybind:onPress(function()
    print("I'm dancing!")  -- imagine that this actually does something useful
end)
```

Do you see what is wrong with this code? The keybind isn't synced to the other instances of the avatar because there's no pings to communicate that this keybind has been clicked! And if the other instances of the avatar don't know when the keybind has been clicked on the host, they will never do the thing the user is expecting the avatar to do

How do we fix this?

The same way as before, we extract the function, turn it into a ping, and when the keybind is clicked we call the ping

```
function pings.dancing()
    print("I'm dancing!")  -- imagine that this actually does something useful
end


local keybind = keybinds:newKeybind("Dance", "key.keyboard.u")

keybind:onPress(function()
    pings.dancing()
end)
```

Now when the keybind is clicked, a ping is sent and makes the other instances do something!

## In-field example without keybinds nor action wheel

Ok, but I did tell that pings are just a tool and like another tool, I can use it without keybinds nor action wheel, but how would you actually use it?

Let's imagine that something in your avatar is tied up to `math.random`, this function is not synced between the other instances of your avatar, in fact they have a different seed, and if this functionality is important enough for your avatar to act at the same time between all instances, you need to use pings to properly.

Take a look at this code

```
events.TICK:register(function()
    if math.random() > 0.99 then
        animation.human.eyes_blink:play()
    end
end)
```

Since I told you that `math.random` shouldn't be expected to give the same values in other instances of your avatar, these other instances will play the animation on their own without any coordination with the host avatar, and depending on what you want to do with your avatar, you may find it an issue

How would we fix this?

Once again, we can create a ping that plays this animation, and on the tick callback, we call this ping instead of directly playing the animation

```
function pings.blink()
    animations.human.eyes_blink:play()
end

events.TICK:register(function()
    if host:isHost() and math.random() > 0.99 then
        pings.blink()
    end
end)
```

But why is there a `host:isHost()`?

You see, this function returns true if the avatar is host, and false otherwise, since the host is now controlling this feature entirely, there's no reason for the other instances to fumble on `math.random`, since this is synced by the pings from the host anyways. And it also leads to a cleaner separation of responsibilities.

## Usage of pings to modify avatar state
Sometimes you may want to have a ping modify something permanently in the avatar, and you fumble on the code for a bit, and come up with this

```
function pings.toggleVisibility()
    -- check if the model is visible, and set it's visibility to the opposite, effectively toggling it
    models.avatar.hat:setVisible(not models.avatar.hat:getVisible())
end

local keybind = keybinds:newKeybind("Toggle Hat", "key.keyboard.h")

keybind:onPress(function()
    pings.toggleVisibility()
end)
```
This code is self-explanatory, it creates a keybind and a ping that toggles the visibility of a model part, and when you click the keybind you call the ping and the visibility changes right?

Sure, but...

You were very excited to tell your peers of your avatar that can put a hat on and off, and immediately join a server. They quickly rush in to check your brand new hat!! And they get very surprised that you can just toggle them on and off with the click of a button.

Then another friend joins the server, and after a bit of back-and-forth, you two notice that the hat's visibility is unsynced! But how? It's all being communicated with pings!

Well, that's the problem, the current ping function relies on the current state of itself to do the stateful thing. This new player loaded your avatar anew and the hat was visible for them even though it's expected to be invisible! And then when their instance of your avatar gets the ping from your machine, it hides the hat even though it was expected to become visible

So, in order to prevent this ping function from relying on it's own state, you have to somehow send the new state with the ping, but how?

You can send the new state by inserting arguments to the ping function, like any other function call

```
function pings.example(newState)
    print(newState)
end

pings.example(true)  -- every receiver of this ping will get "true" for newState alongside the ping call
```

You can extract the visibility-check out of the ping function, and provide what should be the new visibility as an argument

```
function pings.toggleVisibility(newVisibility)
    models.avatar.hat:setVisible(newVisibility)
end

local keybind = keybinds:newKeybind("Toggle Hat", "key.keyboard.h")

keybind:onPress(function()
    -- check if the model is visible, and send a ping that should toggle the visibility to the inverse of what it has been, effectively toggling it
    pings.toggleVisibility(not models.avatar.hat:getVisible())
end)
```

So... You did it! You call back to your friend and everything is working as expected! It's synced properly!

### Extra: Regularly syncing state

But you quickly notice something, what happens if this player joined and I were to *never* toggle my hat? I would have a hidden hat for an indeterminate amount of time, but this player would always see the hat for an intederminate amount of time. This would mean that you need to regularly send this state for the new players to keep up with the new state!

What would you change in the code shown before to fix this issue?

## Limitations

Pings are cool, but they have some potholes, specially if you're more advanced in the field of programming, namely:
* They do not forward the result of the function
* They're not executed immediately after calling the function for the host
* They support passing in arguments, but these arguments must be a vector, matrix, or another lua primitive. They get silently converted to nil if they are not able to be passed